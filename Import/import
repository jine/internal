#!/usr/bin/env php7.0
<?php

define("ACCOUNTING_YEAR", 2015);

require("../laravel/app/Libraries/CurlBrowser.php");
use App\Libraries\CurlBrowser;

if($argc == 1)
{
	echo 
		"Usage: $argv[0]\n" .
		"  --accounts      Import accounting accounts\n" .
		"  --instructions  Import accounting instructions\n" .
		"  --members       Import members\n" .
		"  --keys          Import RFID keys" .
		"  --invoices      Import invoices\n";
}
else
{
	$importer = new Importer;

	for($i = 1; $i <= count($argv); $i++)
	{
		$arg = $argv[$i];
		@list($key, $value) = explode("=", $arg);
		switch($key)
		{
			case "--accounts":
				echo "Parsing --accounts\n";
				$i++;
				for(; $i < count($argv); $i++)
				{
					if(substr($argv[$i], 0, 2) !== "--")
					{
						$file = $argv[$i];
						$importer->Import("account", ACCOUNTING_YEAR, $file);
					}
					else
					{
						$i--;
						break;
					}
				}
				break;

			case "--instructions":
				echo "Parsing --instructions\n";
				$i++;
				for(; $i < count($argv); $i++)
				{
					if(substr($argv[$i], 0, 2) !== "--")
					{
						$file = $argv[$i];
						$importer->Import("instruction", ACCOUNTING_YEAR, $file);
					}
					else
					{
						$i--;
						break;
					}
				}
				break;

			case "--members":
				echo "Parsing --members\n";
				$i++;
				for(; $i < count($argv); $i++)
				{
					if(substr($argv[$i], 0, 2) !== "--")
					{
						$file = $argv[$i];
						$importer->ImportMember($file);
					}
					else
					{
						$i--;
						break;
					}
				}
				break;

			case "--keys":
				echo "Parsing --keys\n";
				$i++;
				for(; $i < count($argv); $i++)
				{
					if(substr($argv[$i], 0, 2) !== "--")
					{
						$file = $argv[$i];
						$importer->ImportKey($file);
					}
					else
					{
						$i--;
						break;
					}
				}
				break;

			case "--invoices":
				echo "Parsing --invoices\n";
				$i++;
				for(; $i < count($argv); $i++)
				{
					if(substr($argv[$i], 0, 2) !== "--")
					{
						$file = $argv[$i];
						$importer->Import("invoice", ACCOUNTING_YEAR, $file);
					}
					else
					{
						$i--;
						break;
					}
				}
				break;

			default:
				die("Error: Unknown argument: {$arg}\n");
		}
	}
}

class Importer
{
	protected $curl;

	public function __construct()
	{
		$this->curl = new CurlBrowser;
	}

	function Import($type, $period, $file)
	{
		if(!file_exists($file))
		{
			die("Error: File does not exist: $file\n");
		}
		echo " * {$file}\t";
		$data = json_decode(file_get_contents($file));

		switch($type)
		{
			case "account":
				$url = "http://internal.dev/api/v2/economy/{$period}/account";
				break;

			case "instruction":
				$url = "http://internal.dev/api/v2/economy/{$period}/instruction";
				break;

			case "invoice":
				$url = "http://internal.dev/api/v2/economy/{$period}/invoice";
				break;
		}

		$this->curl->Post($url, $data, true);

		if($this->curl->StatusCode() == 200)
		{
			echo "OK\n";
		}
		else
		{
			echo "Error\n";
			echo $this->curl->html;
			print_r($this->curl->GetJson());
			die();
		}
	}

	function ImportMember($file)
	{
		if(!file_exists($file))
		{
			die("Error: File does not exist: $file\n");
		}
		echo " * {$file}\t";
		$data = json_decode(file_get_contents($file));

		$url = "http://internal.dev/api/v2/member";

		$this->curl->Post($url, $data, true);

		if($this->curl->StatusCode() == 200)
		{
			echo "OK\n";
		}
		else
		{
			echo "Error\n";
		}
	}

	function ImportKey($file)
	{
		if(!file_exists($file))
		{
			die("Error: File does not exist: $file\n");
		}
		echo " * {$file}\t";
		$data = json_decode(file_get_contents($file));

		$url = "http://internal.dev/api/v2/rfid";

		$this->curl->Post($url, $data, true);

		if($this->curl->StatusCode() == 200)
		{
			echo "OK\n";
			echo $this->curl->html;
			print_r($this->curl->GetJson());
		}
		else
		{
			echo "Error\n";
			echo $this->curl->html;
			print_r($this->curl->GetJson());
		}
	}
}
